FdF - Wireframe project

Tips:
	use libft to the fullest
		get_next_line
		ft_split
		etc.
		no crashs but error when map is not propperly formatted.

New concepts:
	MiniLibX

Boundaries:
	Program name: fdf
	allowed functions:
		open, close, read, write, malloc, free, perror, strerror, exit;
		all functions of the math library (-lm compiler option, man 3 math)
		all functions of the MiniLibX
		ft_printf and any equivalent YOU coded
		libft

Description:
	This project is about creating a simple wireframe model representation
	of a 3D landscape by linking various points (x, y, z)
	thanks to line segments (edges)
	Rules:
		must use MiniLibX
		Makefile
		No global variables

	Rendering:
		Isometric projection
		maps are ".fdf"-files
		map structure:
			x = pos in line
			y = number of line
			z = value
	Graphics:
		display the image in a window
		smooth window management (changing window, minimizing, and so on)
		ESC must close the window and quit the program clean (no memory leaks)
		clicking "x" must close the window and quit the program clean (no memory leaks)
		use MiniLibX

	Bonus:
		Include one extra Projection (parallel or conic)
		Zoom in and out
		Translate your model
		Rotate your model
		Add one more bonus of your choice
		
		
Introduction MiniLibX and graphics libraries in general
	General:
		MiniLibX provides basic simple window creation, a QUESTIONABLE drawing tool, 
		half-ass image functions and a weird event management system.
	Installation:
		Remember that the Flags of MiniLibX are ORDER DEPENDANT in your makefile.
		Necessary resources: xorg, x11 and zlib
		Installing the dependencies on Ubuntu:
			sudo apt-get update && sudo apt-get install xorg libxext-dev zlib1g-dev libbsd-dev
		Compiler flags: ".c" --> ".o"
		%.o: %.c
			$(CC) -Wall -Wextra -Werror -I/usr/include -Imlx_linux -O3 -c $< -o $@
		$(NAME): $(OBJ)
			$(CC) $(OBJ) -Lmlx_linux -lmlx_Linux -L/usr/lib -Imlx_linux -lXext -lX11 -lm -lz -o $(NAME)
	Initialization:
		Min initialization:
			#include <mlx.h>
			
			int	main(void)
			{
				void	*mlx;

				mlx = mlx_init();
			}
		Establishing Window:
			#include <mlx.h>

			int	main(void)
			{
				void	*mlx;
				void	*mlx_win;

				mlx = mlx_init();
				mlx_win = mlx_new_window(mlx, 1920, 1080, "Hello world!");
				mlx_loop(mlx);
			}
	Pushing pixels on the screen:
		There are optimized ways of putting images to the screen.
		mlx_pixel_put function is crazy slow --> tries to put the pixels instantly.
		Solution: Buffer pixels to an image and push the image to the window.
		Image: 

	

